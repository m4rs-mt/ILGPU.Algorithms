// -----------------------------------------------------------------------------
//                             ILGPU.Algorithms
//                  Copyright (c) 2020 ILGPU Algorithms Project
//                                www.ilgpu.net
//
// File: Cordic.Trig.tt/Cordic.Trig.cs
//
// This file is part of ILGPU and is distributed under the University of
// Illinois Open Source License. See LICENSE.txt for details.
// -----------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="Cordic.ttinclude"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace ILGPU.Algorithms
{
    partial class XMath
    {
        /// <summary>
        /// Implementation of trigonometric transcendental functions using CORDIC approximation.
        /// </summary>
        partial class Cordic
        {
            #region Trigonometric

<#  foreach (var operation in operations) { #>
            /// <summary>
            /// Implementation of sine approximation using CORDIC.
            /// </summary>
            /// <param name="radians">The angle in radians</param>
            /// <returns>The sine value</returns>
            public static <#= operation.DataType #> Sin(<#= operation.DataType #> radians)
            {
                SinCos(radians, out var sin, out _);
                return sin;
            }

<# } #>
<#  foreach (var operation in operations) { #>
            /// <summary>
            /// Implementation of cosine approximation using CORDIC.
            /// </summary>
            /// <param name="radians">The angle in radians</param>
            /// <returns>The cosine value</returns>
            public static <#= operation.DataType #> Cos(<#= operation.DataType #> radians)
            {
                SinCos(radians, out _, out var cos);
                return cos;
            }

<# } #>
<#  foreach (var operation in operations) { #>
            /// <summary>
            /// Implementation of sine/cosine approximation using CORDIC.
            /// </summary>
            /// <param name="radians">The angle in radians</param>
            /// <param name="sin">The sine result</param>
            /// <param name="cos">The cosine result</param>
            public static void SinCos(<#= operation.DataType #> radians, out <#= operation.DataType #> sin, out <#= operation.DataType #> cos)
            {
                // Ensure that the radians are between [-PI, PI]
                radians = RangeLimit(radians);

                // Limit radians within the range [-PI/2, PI/2].
                // Adjust the sign for second or third quadrant.
                <#= operation.DataType #> sign;

                if (radians < -PIHalf<#= operation.XMathSuffix #>)
                {
                    radians += PI<#= operation.XMathSuffix #>;
                    sign = -1.0<#= operation.ValueSuffix #>;
                }
                else if (radians > PIHalf<#= operation.XMathSuffix #>)
                {
                    radians -= PI<#= operation.XMathSuffix #>;
                    sign = -1.0<#= operation.ValueSuffix #>;
                }
                else
                    sign = 1.0<#= operation.ValueSuffix #>;

                // Apply <#= operation.Iterations #> iterations.
                RotateIterations(radians, out var currCos, out var currSin);

                // Adjust length of output vector
                sin = currSin * Gain<#= operation.XMathSuffix #> * sign;
                cos = currCos * Gain<#= operation.XMathSuffix #> * sign;
            }

<# } #>
<#  foreach (var operation in operations) { #>
            /// <summary>
            /// Implementation of tangent approximation using CORDIC.
            /// </summary>
            /// <param name="radians">The angle in radians</param>
            /// <returns>The tangent value</returns>
            public static <#= operation.DataType #> Tan(<#= operation.DataType #> radians)
            {
                // NB: This is the same algorithms as SinCos, but without adjustment for
                // second or third quadrant, and without correcting for the "gain" from
                // rotations - both are redudant multiplications for our calculation.

                // Ensure that the radians are between [-PI, PI]
                radians = RangeLimit(radians);

                // Limit radians within the range [-PI/2, PI/2].
                if (radians < -PIHalf<#= operation.XMathSuffix #>)
                    radians += PI<#= operation.XMathSuffix #>;
                else if (radians > PIHalf<#= operation.XMathSuffix #>)
                    radians -= PI<#= operation.XMathSuffix #>;

                // Apply <#= operation.Iterations #> iterations.
                RotateIterations(radians, out var currCos, out var currSin);

                return currSin / currCos;
            }

<# } #>
            #endregion

            #region Inverse Trigonometric

<#  foreach (var operation in operations) { #>
            /// <summary>
            /// Implementation of inverse tangent approximation using CORDIC.
            /// </summary>
            /// <param name="value">The tangent of an angle</param>
            /// <returns>The angle in radians</returns>
            public static <#= operation.DataType #> Atan(<#= operation.DataType #> value)
            {
                // Apply <#= operation.Iterations #> iterations.
                return VectorIterations(value);
            }

<# } #>
<#  foreach (var operation in operations) { #>
            /// <summary>
            /// Implementation of inverse tangent approximation using CORDIC.
            /// </summary>
            /// <param name="y">The y value in radians</param>
            /// <param name="x">The x value in radians</param>
            /// <returns>The angle in radians</returns>
            public static <#= operation.DataType #> Atan2(<#= operation.DataType #> y, <#= operation.DataType #> x)
            {
                // Tranform to equivalent Atan calculation, as defined in:
                // https://en.wikipedia.org/wiki/Atan2
                if (x > 0)
                    return Atan(y / x);
                else if (x < 0 && y >= 0)
                    return Atan(y / x) + PI<#= operation.XMathSuffix #>;
                else if (x < 0 && y < 0)
                    return Atan(y / x) - PI<#= operation.XMathSuffix #>;
                else if (x == 0 && y > 0)
                    return PIHalf<#= operation.XMathSuffix #>;
                else if (x == 0 && y < 0)
                    return -PIHalf<#= operation.XMathSuffix #>;
                else
                    return 0;
            }

<# } #>
            #endregion
        }
    }
}
