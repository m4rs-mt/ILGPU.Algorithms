// ---------------------------------------------------------------------------------------
//                                   ILGPU.Algorithms
//                      Copyright (c) 2019 ILGPU Algorithms Project
//                                    www.ilgpu.net
//
// File: CLContext.Generated.tt/CLContext.Generated.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="../TypeInformation.ttinclude"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var unaryMathFunctions = new ValueTuple<string, Type, string, string>[]
    {
        UnaryMathFunctions[18], // Rcp
        UnaryMathFunctions[19], // Rcp
    };
var binaryMathFunctions = new ValueTuple<string, Type, string, string>[]
    {
        BinaryMathFunctions[6], // Log
        BinaryMathFunctions[7], // Log
    };
#>
using ILGPU.IR.Intrinsics;
using ILGPU.IR.Values;

namespace ILGPU.Algorithms.CL
{
    partial class CLContext
    {
        public static void EnableCLAlgorithms(IntrinsicImplementationManager manager)
        {
            // Register math intrinsics
<# foreach (var (name, type, kind, basicType) in binaryMathFunctions) { #>
            manager.RegisterBinaryArithmetic(
                BinaryArithmeticKind.<#= kind #>,
                BasicValueType.<#= basicType #>,
                GetMathIntrinsic(
                    "<#= name #>",
                    typeof(<#= type #>), typeof(<#= type #>)));
<# } #>

<# foreach (var (name, type, kind, basicType) in unaryMathFunctions) { #>
            manager.RegisterUnaryArithmetic(
                UnaryArithmeticKind.<#= kind #>,
                BasicValueType.<#= basicType #>,
                MathCodeGeneratorIntrinsic);
<# } #>

            // Register group intrinsics
<# foreach (var name in GroupFunctions.Take(4)) { #>
            RegisterIntrinsicCodeGenerator(
                manager,
                AlgorithmContext.GroupExtensionsType,
                CLGroupExtensionsType,
                "<#= name #>",
                "Generate<#= name #>");
<# } #>
<# foreach (var name in GroupFunctions.Skip(4)) { #>
            RegisterIntrinsicMapping(
                manager,
                AlgorithmContext.GroupExtensionsType,
                CLGroupExtensionsType,
                "<#= name #>");
<# } #>

            // Register warp intrinsics
<# foreach (var name in WarpFunctions) { #>
            RegisterIntrinsicCodeGenerator(
                manager,
                AlgorithmContext.WarpExtensionsType,
                CLWarpExtensionsType,
                "<#= name #>",
                "Generate<#= name #>");
<# } #>
        }
    }
}