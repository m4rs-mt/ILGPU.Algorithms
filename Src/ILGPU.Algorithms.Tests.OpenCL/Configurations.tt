<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="../../ILGPU/Src/ILGPU.Tests/Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
using ILGPU.IR.Transformations;
using ILGPU.Tests.OpenCL;
using Xunit;
using Xunit.Abstractions;

<#
var configurationFile = Host.ResolvePath("../ILGPU.Algorithms.Tests/Configurations.txt");
var configurations = TestConfig.Parse(configurationFile, out var levels);
#>
namespace ILGPU.Algorithms.Tests.OpenCL
{
<# foreach (var optLevel in levels) { #>
    public class CLTestContext<#= optLevel #> : CLTestContext
    {
        public CLTestContext<#= optLevel #>()
            : base(
                OptimizationLevel.<#= optLevel #>,
                builder => builder.EnableAlgorithms())
        { }
    }

    [CollectionDefinition("CLContextCollection<#= optLevel #>")]
    public class CLContextCollection<#= optLevel #> :
        ICollectionFixture<CLTestContext<#= optLevel #>> { }

<# } #>
<# foreach (var config in configurations) { #>
<#      foreach (var optLevel in config.OptimizationLevels) { #>
<#      var name = "CL" + config.Name + "_" + optLevel; #>
    [Collection("CLContextCollection<#= optLevel #>")]
    public sealed partial class <#= name #> : <#= config.Name #>
    {
        public <#= name #>(
            ITestOutputHelper output,
            CLTestContext<#= optLevel #> testContext)
            : base(output, testContext)
        { }
    }

<#      } #>
<# } #>
}