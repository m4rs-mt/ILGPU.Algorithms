<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="XMathTests.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
using ILGPU.Runtime;
using System;
using System.Collections.Generic;
using System.Linq;
using Xunit;

<#
    var rcpFunctions = new []
    {
        new XMathFunction("Rcp"  , "float" , new Precision(15, 15, 15)),
        new XMathFunction("Rcp"  , "double", new Precision(15, 15, 15)),
    };
#>
namespace ILGPU.Algorithms.Tests
{
    // Performs tests on the various reciprocal functions across a range of input values
    // and ensures a minimum precision on each accelerator type.
    partial class XMathTests
    {
<# foreach (var function in rcpFunctions) { #>
        internal static void <#= function.KernelName #>(Index index, ArrayView<<#= function.DataType #>> input, ArrayView<<#= function.DataType #>> output)
        {
            output[index] = XMath.<#= function.Name #>(input[index]);
        }

        [Fact]
        [KernelMethod(nameof(<#= function.KernelName #>))]
        public void <#= function.TestName #>()
        {
<#
            var start = 0.5;
            var end = 400.0;
            var step = 0.5;
#>
            // [<#= start #>, <#= end #>]
            var inputValues = new List<<#= function.DataType #>>();
            for (var x = <#= start #><#= function.ValueSuffix #>; x <= <#= end #><#= function.ValueSuffix #>; x += <#= step #><#= function.ValueSuffix #>)
                inputValues.Add(x);

            var inputArray = inputValues.ToArray();
            using var input = Accelerator.Allocate<<#= function.DataType #>>(inputArray.Length);
            using var output = Accelerator.Allocate<<#= function.DataType #>>(inputArray.Length);

            input.CopyFrom(inputArray, 0, 0, inputArray.Length);

<# if (function.Name == "Rcp") { #>
            if (Accelerator.AcceleratorType == AcceleratorType.OpenCL)
            {
                // TODO: Implement OpenCL support for XMath.Rcp
                var ae = Assert.Throws<AggregateException>(() => Execute(input.Length, input.View, output.View));
                Assert.Single(ae.InnerExceptions);
                Assert.IsType<Backends.NotSupportedIntrinsicException>(ae.InnerExceptions[0]);
                return;
            }
<# } #>

            Execute(input.Length, input.View, output.View);

            var expected = inputArray.Select(x => 1 / x).ToArray();
            if (Accelerator.AcceleratorType == AcceleratorType.Cuda)
                VerifyWithinPrecision(output, expected, <#= function.Precision.Cuda #>);
            else if (Accelerator.AcceleratorType == AcceleratorType.OpenCL)
                VerifyWithinPrecision(output, expected, <#= function.Precision.OpenCL #>);
            else
                VerifyWithinPrecision(output, expected, <#= function.Precision.CPU #>);
        }

<# } #>
    }
}
