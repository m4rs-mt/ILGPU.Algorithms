<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>

using ILGPU.Runtime;
using ILGPU.Tests;
using System.Linq;
using Xunit;
using Xunit.Abstractions;

#pragma warning disable xUnit1026 

namespace ILGPU.Algorithms.Tests
{
    public abstract partial class TransformExtensionTests : TestBase
    {
        protected TransformExtensionTests(
            ITestOutputHelper output,
            TestContext testContext)
            : base(output, testContext) { }

        #region MemberData

        public static TheoryData<object> TestDataLength =>
            new TheoryData<object>
        {
<#
            foreach (var size in ArraySizes) {
#>
            { <#= size #> },
<#
            }
#>
        };

        public static TheoryData<object, object, object> CastFromIndex1TestData =>
            new TheoryData<object, object, object>
        {
<#
        var types = AtomicNumericTypes;
        foreach (var type in types) {
            foreach (var size in ArraySizes) {
#>
            { default(<#= type.Type #>), default(Index1To<#= type.Name #>Transformer),
                <#= size #> },
<#
            }
        }
#>
        };

        #endregion

        [Theory]
        [MemberData(nameof(TestDataLength))]
        public void TransformToNegativeTest(int length)
        {
            using var stream = Accelerator.CreateStream();
            using var input = Accelerator.Allocate<int>(length);
            using var output = Accelerator.Allocate<int>(length);
            
            var sequencer = new Int32TestSequencer();
            var sequence = sequencer.ComputeSequence(42, 0, length);
            input.CopyFrom(stream, sequence, 0, 0, length);

            Accelerator.Transform<int, IntToNegIntTransformer>(
                stream, 
                input.View,
                output.View, 
                new IntToNegIntTransformer());

            stream.Synchronize();
            Verify(output, sequence.Select(x => -x).ToArray());
        }

        [Theory]
        [MemberData(nameof(TestDataLength))]
        public void TransformIntToLongTest(int length)
        {
            using var stream = Accelerator.CreateStream();
            using var input = Accelerator.Allocate<int>(length);
            using var output = Accelerator.Allocate<long>(length);

            var sequencer = new Int32TestSequencer();
            var sequence = sequencer.ComputeSequence(42, 0, length);
            input.CopyFrom(stream, sequence, 0, 0, length);

            var transformer =
                Accelerator.CreateTransformer<int, long, IntToLongTransformer>();
            transformer(stream,
                input.View,
                output.View,
                new IntToLongTransformer());

            stream.Synchronize();
            Verify(output, sequence.Select(x => (long)x).ToArray());
        }

        [Theory]
        [MemberData(nameof(TestDataLength))]
        public void TransformUInt32ToBitCompIntTest(int length)
        {
            using var stream = Accelerator.CreateStream();
            using var input = Accelerator.Allocate<uint>(length);
            using var output = Accelerator.Allocate<int>(length);

            var sequencer = new UInt32TestSequencer();
            var sequence = sequencer.ComputeSequence(0, 1, length);
            input.CopyFrom(stream, sequence, 0, 0, length);

            Accelerator.Transform(
                stream,
                input.View,
                output.View,
                new UInt32ToBitCompInt32Transformer());

            stream.Synchronize();
            Verify(output, sequence.Select(x => (int)~x).ToArray());
        }

        [Theory]
        [MemberData(nameof(CastFromIndex1TestData))]
        public void CastFromIndex1Test<T, TTransformer>(
            T _,
            TTransformer transformer,
            int length)
            where T : unmanaged
            where TTransformer : struct, ITransformer<Index1, T>
        {
            using var stream = Accelerator.CreateStream();
            using var input = Accelerator.Allocate<Index1>(length);
            using var output = Accelerator.Allocate<T>(length);

            var sequencer = new Index1TestSequencer();
            var sequence = sequencer.ComputeSequence(0, 1, length);
            input.CopyFrom(stream, sequence, 0, 0, length);

            Accelerator.Transform(stream, input.View, output.View, transformer);

            stream.Synchronize();
            Verify(output, sequence.Select(x => transformer.Transform(x)).ToArray());
        }
    }
}

#pragma warning restore xUnit1026 // Theory methods should use all of their parameters